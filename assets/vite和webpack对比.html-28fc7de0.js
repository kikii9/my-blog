import{_ as n,o as s,c as a,a as t}from"./app-1a153d54.js";const e={},o=t(`<p>在 Vue3 的 Composition API 中，<code>ref</code> 和 <code>reactive</code> 都用于创建响应式数据，但它们的使用方式和原理有所不同。以下是它们的主要区别：</p><hr><h2 id="_1-ref-与-reactive-的核心区别" tabindex="-1"><a class="header-anchor" href="#_1-ref-与-reactive-的核心区别" aria-hidden="true">#</a> <strong>1. <code>ref</code> 与 <code>reactive</code> 的核心区别</strong></h2><table><thead><tr><th></th><th><strong><code>ref</code></strong></th><th><strong><code>reactive</code></strong></th></tr></thead><tbody><tr><td><strong>数据类型</strong></td><td>适用于<strong>基本类型</strong>和<strong>对象</strong></td><td>适用于<strong>对象和数组</strong></td></tr><tr><td><strong>结构</strong></td><td>返回一个<strong>带 <code>.value</code> 属性</strong>的响应式对象</td><td>返回一个<strong>直接可用的响应式对象</strong></td></tr><tr><td><strong>深度响应性</strong></td><td><strong>基本类型自动响应</strong>，但对象类型<strong>内部仍需 <code>.value</code></strong></td><td><strong>深度响应式</strong>，对象内部属性也是响应式</td></tr><tr><td><strong>解构行为</strong></td><td>解构时会<strong>丢失响应性</strong>，需要 <code>toRef()</code> 或 <code>toRefs()</code></td><td>直接解构不会丢失响应性</td></tr><tr><td><strong>适用场景</strong></td><td>适用于<strong>基本数据类型</strong>或需要独立管理的变量</td><td>适用于<strong>复杂数据结构</strong>（对象、数组等）</td></tr></tbody></table><hr><h2 id="_2-ref-示例" tabindex="-1"><a class="header-anchor" href="#_2-ref-示例" aria-hidden="true">#</a> <strong>2. <code>ref</code> 示例</strong></h2><h3 id="_1-ref-适用于基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-ref-适用于基本数据类型" aria-hidden="true">#</a> <strong>（1）<code>ref</code> 适用于基本数据类型</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 必须通过 .value 访问</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>特点：</strong></p><ul><li><code>count</code> 是响应式的，但必须用 <code>.value</code> 访问和修改。</li><li>适用于<strong>数字、字符串、布尔值等基本类型</strong>。</li></ul><hr><h3 id="_2-ref-适用于对象" tabindex="-1"><a class="header-anchor" href="#_2-ref-适用于对象" aria-hidden="true">#</a> <strong>（2）<code>ref</code> 适用于对象</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">updateUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 修改对象属性时，仍需 .value</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>特点：</strong></p><ul><li><code>ref</code> 也可以用于对象，但仍需通过 <code>user.value</code> 访问。</li><li><strong>对象内部仍然是响应式的</strong>，但如果直接 <code>user = {}</code> 赋值，响应性会丢失。</li></ul><hr><h2 id="_3-reactive-示例" tabindex="-1"><a class="header-anchor" href="#_3-reactive-示例" aria-hidden="true">#</a> <strong>3. <code>reactive</code> 示例</strong></h2><h3 id="_1-reactive-适用于对象" tabindex="-1"><a class="header-anchor" href="#_1-reactive-适用于对象" aria-hidden="true">#</a> <strong>（1）<code>reactive</code> 适用于对象</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">updateUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 直接修改，无需 .value</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>特点：</strong></p><ul><li>直接对 <code>user</code> 进行修改，无需 <code>.value</code>。</li><li><strong>对象内部属性也是响应式的</strong>，可直接修改。</li></ul><hr><h3 id="_2-reactive-适用于数组" tabindex="-1"><a class="header-anchor" href="#_2-reactive-适用于数组" aria-hidden="true">#</a> <strong>（2）<code>reactive</code> 适用于数组</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">&#39;学习 Vue3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">&#39;学习 Pinia&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接操作</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>特点：</strong></p><ul><li><strong>数组也是响应式的</strong>，可以直接 <code>push/pop</code> 操作。</li></ul><hr><h2 id="_4-ref-和-reactive-的解构问题" tabindex="-1"><a class="header-anchor" href="#_4-ref-和-reactive-的解构问题" aria-hidden="true">#</a> <strong>4. <code>ref</code> 和 <code>reactive</code> 的解构问题</strong></h2><p>如果你想从 <code>reactive</code> 或 <code>ref</code> 对象中<strong>解构属性</strong>，要小心响应性丢失的问题。</p><h3 id="_1-ref-解构会丢失响应性" tabindex="-1"><a class="header-anchor" href="#_1-ref-解构会丢失响应性" aria-hidden="true">#</a> <strong>（1）<code>ref</code> 解构会丢失响应性</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// ❌ 这样会丢失响应性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>✅ 解决方案</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ 这样 name 仍是响应式的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-reactive-解构会丢失响应性" tabindex="-1"><a class="header-anchor" href="#_2-reactive-解构会丢失响应性" aria-hidden="true">#</a> <strong>（2）<code>reactive</code> 解构会丢失响应性</strong></h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment">// ❌ 解构后 name 变成普通变量，失去响应性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>✅ 解决方案</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ 这样 name 仍然是响应式的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-什么时候用-ref-什么时候用-reactive" tabindex="-1"><a class="header-anchor" href="#_5-什么时候用-ref-什么时候用-reactive" aria-hidden="true">#</a> <strong>5. 什么时候用 <code>ref</code>，什么时候用 <code>reactive</code>？</strong></h2><p>✅ <strong>使用 <code>ref</code>：</strong></p><ul><li>适用于 <strong>基本数据类型</strong>（字符串、数字、布尔值）。</li><li>需要<strong>解构后仍然保持响应性</strong>（使用 <code>toRef</code> ）。</li></ul><p>✅ <strong>使用 <code>reactive</code>：</strong></p><ul><li>适用于 <strong>对象和数组</strong>，可以直接修改内部属性。</li><li>需要对整个对象进行<strong>深度响应式管理</strong>。</li></ul><p>✅ <strong>混合使用 <code>ref</code> 和 <code>reactive</code>：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eunie&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`age\` 仍然是 ref</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 <code>user.age.value</code> 仍然可以单独监听变化。</p><hr><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> <strong>6. 总结</strong></h2><table><thead><tr><th>特性</th><th><code>ref</code></th><th><code>reactive</code></th></tr></thead><tbody><tr><td>适用数据类型</td><td><strong>基本类型</strong>（数字、字符串、布尔） 或 <strong>对象</strong></td><td><strong>对象和数组</strong></td></tr><tr><td>访问方式</td><td><code>.value</code> 访问和修改</td><td>直接访问和修改</td></tr><tr><td>深度响应式</td><td>仅 <code>ref</code> 自身是响应式，<strong>对象内部不是</strong></td><td><strong>对象内部所有属性都是响应式的</strong></td></tr><tr><td>结构解构</td><td>解构后<strong>丢失响应性</strong>，需 <code>toRef</code></td><td>解构后<strong>丢失响应性</strong>，需 <code>toRefs</code></td></tr><tr><td>推荐使用场景</td><td>1️⃣ 需要解构时仍保持响应式2️⃣ 适用于单一变量</td><td>1️⃣ 适用于对象、数组 2️⃣ 需要深度响应式</td></tr></tbody></table><hr><h2 id="_7-实际项目中的使用经验" tabindex="-1"><a class="header-anchor" href="#_7-实际项目中的使用经验" aria-hidden="true">#</a> <strong>7. 实际项目中的使用经验</strong></h2><ul><li><strong>状态存储</strong>：使用 <code>reactive</code> 管理全局状态，如用户信息、表单数据等。</li><li><strong>独立变量</strong>：对于 <code>loading</code>、<code>error</code> 这类独立变量，使用 <code>ref</code>，因为它们是基本类型。</li><li><strong>解构问题</strong>：在从 <code>store</code> 或 <code>reactive</code> 对象中提取数据时，使用 <code>toRefs()</code> 确保响应性不丢失。</li></ul><p>通过合理选择 <code>ref</code> 和 <code>reactive</code>，保证了<strong>代码的简洁性和高效性</strong>，避免了 Vue2 中 <code>data</code> 和 <code>computed</code> 的分散定义问题，使得状态管理更加直观和易于维护。</p>`,54),p=[o];function c(r,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","vite和webpack对比.html.vue"]]);export{d as default};
