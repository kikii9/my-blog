import{_ as t,o as r,c as d,a as o}from"./app-1f20ff92.js";const s={},n=o('<p>熟悉 <strong>网络协议（HTTP/HTTPS/SSL）</strong> 是前端开发的必备知识，尤其在面试中，面试官可能会重点考察 <strong>HTTP 协议的基础、HTTPS 加密机制、状态码、请求方法，以及安全性相关问题</strong>。以下是详细的解析。</p><hr><h2 id="_1-http-协议" tabindex="-1"><a class="header-anchor" href="#_1-http-协议" aria-hidden="true">#</a> <strong>1. HTTP 协议</strong></h2><p>HTTP（HyperText Transfer Protocol，超文本传输协议）是一种 <strong>无状态</strong>、<strong>基于请求-响应模型</strong> 的协议，用于浏览器和服务器之间的通信。</p><h3 id="_1-1-http-的特点" tabindex="-1"><a class="header-anchor" href="#_1-1-http-的特点" aria-hidden="true">#</a> <strong>1.1. HTTP 的特点</strong></h3><ul><li><strong>无状态</strong>（Stateless）：每次请求都是独立的，服务器不会记住之前的请求状态（但可以通过 Cookie、Session 解决）。</li><li><strong>无连接</strong>（Connectionless）：每个请求处理完后，连接就会断开（HTTP/1.1 后默认支持 <code>Keep-Alive</code>）。</li><li><strong>明文传输</strong>（Insecure）：数据未加密，容易被窃取和篡改（HTTPS 解决）。</li><li><strong>基于请求-响应模式</strong>：客户端发起请求，服务器返回响应。</li></ul><h3 id="_1-2-http-请求方法" tabindex="-1"><a class="header-anchor" href="#_1-2-http-请求方法" aria-hidden="true">#</a> <strong>1.2. HTTP 请求方法</strong></h3><table><thead><tr><th>方法</th><th>作用</th><th>是否幂等</th><th>是否有请求体</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>✅</td><td>❌</td></tr><tr><td>POST</td><td>发送数据（创建资源）</td><td>❌</td><td>✅</td></tr><tr><td>PUT</td><td>更新资源（整体更新）</td><td>✅</td><td>✅</td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>❌</td><td>✅</td></tr><tr><td>DELETE</td><td>删除资源</td><td>✅</td><td>❌</td></tr><tr><td>OPTIONS</td><td>预检请求（CORS）</td><td>✅</td><td>❌</td></tr><tr><td>HEAD</td><td>获取响应头</td><td>✅</td><td>❌</td></tr></tbody></table><blockquote><p><strong>幂等性</strong>：多次相同的请求，结果不变。例如，<code>GET</code> 和 <code>DELETE</code> 是幂等的，而 <code>POST</code> 不是（多次 <code>POST</code> 可能创建多个资源）。</p></blockquote><h3 id="_1-3-http-状态码" tabindex="-1"><a class="header-anchor" href="#_1-3-http-状态码" aria-hidden="true">#</a> <strong>1.3. HTTP 状态码</strong></h3><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td><strong>2xx 成功</strong></td><td>200 OK（成功），201 Created（已创建），204 No Content（无返回内容）</td></tr><tr><td><strong>3xx 重定向</strong></td><td>301 Moved Permanently（永久重定向），302 Found（临时重定向），304 Not Modified（缓存命中）</td></tr><tr><td><strong>4xx 客户端错误</strong></td><td>400 Bad Request（请求错误），401 Unauthorized（未认证），403 Forbidden（禁止访问），404 Not Found（资源不存在）</td></tr><tr><td><strong>5xx 服务器错误</strong></td><td>500 Internal Server Error（服务器错误），502 Bad Gateway（网关错误），503 Service Unavailable（服务不可用）</td></tr></tbody></table><hr><h2 id="_2-https-与-ssl" tabindex="-1"><a class="header-anchor" href="#_2-https-与-ssl" aria-hidden="true">#</a> <strong>2. HTTPS 与 SSL</strong></h2><h3 id="_2-1-https-是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-https-是什么" aria-hidden="true">#</a> <strong>2.1. HTTPS 是什么？</strong></h3><p>HTTPS（HyperText Transfer Protocol Secure）= <strong>HTTP + SSL/TLS 加密</strong>，确保：</p><ul><li><strong>数据加密</strong>（防止窃听）</li><li><strong>数据完整性</strong>（防止篡改）</li><li><strong>身份认证</strong>（防止中间人攻击）</li></ul><h3 id="_2-2-ssl-tls-加密机制" tabindex="-1"><a class="header-anchor" href="#_2-2-ssl-tls-加密机制" aria-hidden="true">#</a> <strong>2.2. SSL/TLS 加密机制</strong></h3><p>HTTPS 采用 <strong>SSL/TLS</strong>（Secure Sockets Layer / Transport Layer Security）进行加密。加密方式包括：</p><ol><li><p>对称加密</p><p>（AES、DES）</p><ul><li>加解密使用 <strong>相同的密钥</strong></li><li><strong>优点</strong>：速度快</li><li><strong>缺点</strong>：密钥传输容易被窃取</li></ul></li><li><p>非对称加密</p><p>（RSA、ECC）</p><ul><li><strong>公钥加密，私钥解密</strong></li><li><strong>优点</strong>：安全性高</li><li><strong>缺点</strong>：计算开销大</li></ul></li><li><p>哈希算法</p><p>（SHA-256）</p><ul><li><strong>用于数据完整性校验</strong></li><li><strong>不可逆</strong></li></ul></li></ol><h3 id="_2-3-https-握手过程" tabindex="-1"><a class="header-anchor" href="#_2-3-https-握手过程" aria-hidden="true">#</a> <strong>2.3. HTTPS 握手过程</strong></h3><ol><li><strong>客户端</strong> 发起 <code>HTTPS</code> 请求</li><li><strong>服务器</strong> 返回 <code>SSL 证书</code>（包含公钥）</li><li><strong>客户端</strong> 验证 <code>SSL 证书</code> 是否有效</li><li><strong>客户端</strong> 生成 <strong>对称密钥</strong>，并用 <code>公钥</code> 加密后发送给服务器</li><li><strong>服务器</strong> 用 <code>私钥</code> 解密，获得对称密钥</li><li><strong>后续通信</strong> 使用 <strong>对称加密</strong> 进行加密传输</li></ol><h3 id="_2-4-http-vs-https" tabindex="-1"><a class="header-anchor" href="#_2-4-http-vs-https" aria-hidden="true">#</a> <strong>2.4. HTTP vs HTTPS</strong></h3><table><thead><tr><th>特性</th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td><strong>安全性</strong></td><td>❌ 明文传输，易被劫持</td><td>✅ 数据加密，防监听</td></tr><tr><td><strong>端口</strong></td><td>80</td><td>443</td></tr><tr><td><strong>证书</strong></td><td>不需要</td><td>需要 SSL 证书（CA 签发）</td></tr><tr><td><strong>速度</strong></td><td>快</td><td>稍慢（握手 &amp; 加密开销）</td></tr></tbody></table><blockquote><p>面试常问：<strong>HTTPS 真的安全吗？</strong><strong>答</strong>：HTTPS 可以 <strong>防监听、防篡改、防中间人攻击</strong>，但并不能 <strong>防 DDoS 攻击、SQL 注入、XSS</strong>。</p></blockquote><hr><h2 id="_3-http-版本演进" tabindex="-1"><a class="header-anchor" href="#_3-http-版本演进" aria-hidden="true">#</a> <strong>3. HTTP 版本演进</strong></h2><table><thead><tr><th>版本</th><th>主要特性</th></tr></thead><tbody><tr><td>HTTP/1.0</td><td>每次请求都新建 TCP 连接（无 Keep-Alive）</td></tr><tr><td>HTTP/1.1</td><td><strong>支持 Keep-Alive</strong>，默认长连接，管道化（Pipeline）</td></tr><tr><td>HTTP/2</td><td><strong>二进制分帧</strong>，多路复用，首部压缩（HPACK），服务器推送</td></tr><tr><td>HTTP/3</td><td><strong>基于 QUIC（UDP）</strong>，减少握手时间，提高性能</td></tr></tbody></table><h3 id="_3-1-http-1-1-vs-http-2" tabindex="-1"><a class="header-anchor" href="#_3-1-http-1-1-vs-http-2" aria-hidden="true">#</a> <strong>3.1. HTTP/1.1 vs HTTP/2</strong></h3><table><thead><tr><th>特性</th><th>HTTP/1.1</th><th>HTTP/2</th></tr></thead><tbody><tr><td><strong>连接复用</strong></td><td>❌</td><td>✅ 多路复用</td></tr><tr><td><strong>首部压缩</strong></td><td>❌</td><td>✅ HPACK</td></tr><tr><td><strong>服务器推送</strong></td><td>❌</td><td>✅</td></tr></tbody></table><blockquote><p>面试常问：<strong>HTTP/2 为什么更快？</strong> <strong>答</strong>：因为它使用 <strong>二进制分帧</strong>，支持 <strong>多路复用</strong>，减少了 <strong>队头阻塞</strong>，加快了传输速度。</p></blockquote>',30),e=[n];function a(h,g){return r(),d("div",null,e)}const i=t(s,[["render",a],["__file","网络协议.html.vue"]]);export{i as default};
