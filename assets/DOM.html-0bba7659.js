import{_ as n,o as s,c as a,a as t}from"./app-1f20ff92.js";const e={},o=t(`<h2 id="dom-document-object-model-简介" tabindex="-1"><a class="header-anchor" href="#dom-document-object-model-简介" aria-hidden="true">#</a> <strong>DOM（Document Object Model）简介</strong></h2><p><strong>DOM（文档对象模型）**是浏览器提供的一个用于访问和操作HTML或XML文档的编程接口。它将整个文档作为一棵**树形结构</strong>来表示，其中每个节点都是文档的组成部分（例如元素、属性和文本等）。DOM 允许开发者使用编程语言（通常是 JavaScript）来动态地访问和修改文档内容、结构和样式。</p><h3 id="dom的结构" tabindex="-1"><a class="header-anchor" href="#dom的结构" aria-hidden="true">#</a> <strong>DOM的结构</strong></h3><p>DOM 将HTML文档解析成一个树形结构，树的每个节点代表文档的一个部分，常见的节点类型有：</p><ul><li><strong>文档节点（Document Node）</strong>：代表整个文档，DOM 树的根节点。</li><li><strong>元素节点（Element Node）</strong>：代表HTML标签元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>。</li><li><strong>文本节点（Text Node）</strong>：代表HTML标签内的文本内容。</li><li><strong>属性节点（Attribute Node）</strong>：代表HTML标签的属性，如 <code>id=&quot;test&quot;</code>。</li><li><strong>注释节点（Comment Node）</strong>：代表HTML文档中的注释。</li></ul><h3 id="dom树的示例" tabindex="-1"><a class="header-anchor" href="#dom树的示例" aria-hidden="true">#</a> <strong>DOM树的示例</strong></h3><p>假设有以下HTML文档：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>DOM Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome to DOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is an example of DOM structure.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM树结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Document
  └── html
      ├── head
      │   └── title
      │       └── &quot;DOM Example&quot;
      └── body
          ├── h1
          │   └── &quot;Welcome to DOM&quot;
          └── p
              └── &quot;This is an example of DOM structure.&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom的操作" tabindex="-1"><a class="header-anchor" href="#dom的操作" aria-hidden="true">#</a> <strong>DOM的操作</strong></h3><p>JavaScript通过DOM提供的API可以访问、修改、添加或删除节点，常见的DOM操作方法包括：</p><h4 id="_1-访问节点" tabindex="-1"><a class="header-anchor" href="#_1-访问节点" aria-hidden="true">#</a> 1. <strong>访问节点</strong></h4><ul><li><p><strong>获取元素节点</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;elementId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;className&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> paragraphs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取文本节点内容</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> element<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
<span class="token keyword">const</span> htmlContent <span class="token operator">=</span> element<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-修改节点" tabindex="-1"><a class="header-anchor" href="#_2-修改节点" aria-hidden="true">#</a> 2. <strong>修改节点</strong></h4><ul><li><p><strong>修改元素属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;newId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;newClass&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>修改文本内容</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;New text content&quot;</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&lt;span&gt;New HTML content&lt;/span&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>添加新的元素</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
newElement<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;New Element!&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-删除节点" tabindex="-1"><a class="header-anchor" href="#_3-删除节点" aria-hidden="true">#</a> 3. <strong>删除节点</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom的事件模型" tabindex="-1"><a class="header-anchor" href="#dom的事件模型" aria-hidden="true">#</a> <strong>DOM的事件模型</strong></h3><p>DOM允许开发者为页面上的元素绑定事件处理程序。常见的事件类型有：</p><ul><li><strong>鼠标事件</strong>：<code>click</code>、<code>mouseover</code>、<code>mouseout</code>、<code>mousemove</code></li><li><strong>键盘事件</strong>：<code>keydown</code>、<code>keyup</code>、<code>keypress</code></li><li><strong>表单事件</strong>：<code>submit</code>、<code>input</code>、<code>change</code></li><li><strong>窗口事件</strong>：<code>load</code>、<code>resize</code>、<code>scroll</code></li></ul><h4 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听" aria-hidden="true">#</a> 事件监听</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myButton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Button clicked!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom的性能考虑" tabindex="-1"><a class="header-anchor" href="#dom的性能考虑" aria-hidden="true">#</a> <strong>DOM的性能考虑</strong></h3><p>DOM操作往往是比较慢的，特别是在频繁修改或重新渲染页面的情况下。为提高性能，可以考虑以下方法：</p><ul><li><strong>批量修改DOM</strong>：避免多次操作DOM，而是将多个修改合并在一次操作中。</li><li><strong>使用<code>documentFragment</code></strong>：创建一个轻量级的虚拟DOM片段，避免直接操作真实DOM。</li><li><strong>虚拟DOM</strong>：一些框架（如React）使用虚拟DOM来优化更新和渲染操作，减少对真实DOM的操作。</li></ul><h3 id="常用dom方法" tabindex="-1"><a class="header-anchor" href="#常用dom方法" aria-hidden="true">#</a> <strong>常用DOM方法</strong></h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getElementById()</code></td><td>通过元素的 <code>id</code> 获取元素</td></tr><tr><td><code>getElementsByClassName()</code></td><td>通过类名获取元素集合</td></tr><tr><td><code>getElementsByTagName()</code></td><td>通过标签名获取元素集合</td></tr><tr><td><code>querySelector()</code></td><td>获取第一个匹配的元素</td></tr><tr><td><code>querySelectorAll()</code></td><td>获取所有匹配的元素集合</td></tr><tr><td><code>createElement()</code></td><td>创建新的元素节点</td></tr><tr><td><code>createTextNode()</code></td><td>创建新的文本节点</td></tr><tr><td><code>appendChild()</code></td><td>将节点添加到父节点</td></tr><tr><td><code>removeChild()</code></td><td>删除父节点下的子节点</td></tr></tbody></table><h3 id="dom与浏览器渲染的关系" tabindex="-1"><a class="header-anchor" href="#dom与浏览器渲染的关系" aria-hidden="true">#</a> <strong>DOM与浏览器渲染的关系</strong></h3><ol><li><strong>DOM树构建</strong>：浏览器解析HTML文档并构建DOM树。</li><li><strong>CSSOM树构建</strong>：浏览器解析CSS样式表并构建CSSOM树。</li><li><strong>渲染树构建</strong>：结合DOM树和CSSOM树生成渲染树（Render Tree）。</li><li><strong>页面渲染</strong>：浏览器根据渲染树绘制页面内容。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><ul><li><strong>DOM</strong>是浏览器提供的一个API，用于操作HTML和XML文档的结构。</li><li><strong>树形结构</strong>表示文档，节点代表文档中的元素、文本、属性等。</li><li><strong>JavaScript</strong>通过DOM提供的接口，动态地<strong>修改、访问、删除</strong>文档中的内容。</li><li><strong>DOM操作</strong>可能对性能有影响，尤其是频繁更新页面时，可以通过优化方法提高性能。</li></ul><p>DOM是前端开发的核心部分，它使得网页可以通过脚本动态交互和改变。</p>`,33),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","DOM.html.vue"]]);export{u as default};
