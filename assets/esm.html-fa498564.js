import{_ as n,o as s,c as a,a as t}from"./app-1a153d54.js";const e={},o=t(`<h3 id="esm-es-modules-详解" tabindex="-1"><a class="header-anchor" href="#esm-es-modules-详解" aria-hidden="true">#</a> <strong>ESM（ES Modules）详解</strong></h3><p><strong>ESM（ECMAScript Modules）</strong>，即 <strong>ES6 模块化</strong>，是 JavaScript 在 <strong>ECMAScript 2015（ES6）</strong> 规范中引入的 <strong>官方标准模块化</strong> 方案。它是目前浏览器和 Node.js 都支持的 <strong>模块化系统</strong>，也是现代前端开发的主流方案。</p><hr><h2 id="_1-esm-介绍" tabindex="-1"><a class="header-anchor" href="#_1-esm-介绍" aria-hidden="true">#</a> <strong>1. ESM 介绍</strong></h2><p>在 ESM 之前，JavaScript 主要使用 <strong>CommonJS（Node.js）</strong> 和 <strong>AMD/RequireJS（前端）</strong> 进行模块化，但这些方案都有一定的缺陷，比如：</p><ul><li><strong>CommonJS</strong> 是同步加载，不适用于浏览器环境。</li><li><strong>AMD</strong> 代码复杂，可读性差。</li><li><strong>没有官方标准，导致不同模块化方案之间不兼容。</strong></li></ul><p>为了解决这些问题，<strong>ES6 模块化（ESM）</strong> 作为官方标准，原生支持 <strong>按需加载、静态分析、异步导入</strong>，并且能够运行在 <strong>浏览器</strong> 和 <strong>Node.js</strong> 中。</p><hr><h2 id="_2-esm-语法" tabindex="-1"><a class="header-anchor" href="#_2-esm-语法" aria-hidden="true">#</a> <strong>2. ESM 语法</strong></h2><h3 id="_1-导出模块" tabindex="-1"><a class="header-anchor" href="#_1-导出模块" aria-hidden="true">#</a> <strong>（1）导出模块</strong></h3><p>ESM 提供两种导出方式：</p><ul><li><strong>命名导出（Named Export）</strong></li><li><strong>默认导出（Default Export）</strong></li></ul><h4 id="_1-命名导出-named-export" tabindex="-1"><a class="header-anchor" href="#_1-命名导出-named-export" aria-hidden="true">#</a> <strong>① 命名导出（Named Export）</strong></h4><p>允许导出多个变量、函数或类，使用 <code>{}</code> 结构导入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// math.js - 命名导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">subtract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入时，需要使用 <strong>解构 <code>{}</code></strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js - 导入模块</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-默认导出-default-export" tabindex="-1"><a class="header-anchor" href="#_2-默认导出-default-export" aria-hidden="true">#</a> <strong>② 默认导出（Default Export）</strong></h4><p>一个模块只能有一个 <code>export default</code>，导入时可以任意命名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// greet.js - 默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js - 导入默认模块</span>
<span class="token keyword">import</span> greet <span class="token keyword">from</span> <span class="token string">&#39;./greet.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 这里可以任意命名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello, Alice!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-混合使用-named-default" tabindex="-1"><a class="header-anchor" href="#_3-混合使用-named-default" aria-hidden="true">#</a> <strong>③ 混合使用（Named + Default）</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// main.js</span>
<span class="token keyword">import</span> greet<span class="token punctuation">,</span> <span class="token punctuation">{</span> version<span class="token punctuation">,</span> log <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">;</span>

<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;Hello, Bob!&quot;</span>
<span class="token function">log</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;1.0.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-导入模块" tabindex="-1"><a class="header-anchor" href="#_2-导入模块" aria-hidden="true">#</a> <strong>（2）导入模块</strong></h3><table><thead><tr><th><strong>导入方式</strong></th><th><strong>示例</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>命名导入</strong></td><td><code>import { add } from &#39;./math.js&#39;</code></td><td>仅导入 <code>add</code> 方法</td></tr><tr><td><strong>别名导入</strong></td><td><code>import { add as sum } from &#39;./math.js&#39;</code></td><td>使用 <code>sum</code> 代替 <code>add</code></td></tr><tr><td><strong>默认导入</strong></td><td><code>import greet from &#39;./greet.js&#39;</code></td><td>只能有一个 <code>export default</code></td></tr><tr><td><strong>整体导入</strong></td><td><code>import * as math from &#39;./math.js&#39;</code></td><td><code>math.add()</code> 访问导出内容</td></tr><tr><td><strong>动态导入（异步）</strong></td><td><code>import(&#39;./math.js&#39;).then(module =&gt; {...})</code></td><td>适用于按需加载</td></tr></tbody></table><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 math.add</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 math.subtract</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-esm-的特点" tabindex="-1"><a class="header-anchor" href="#_3-esm-的特点" aria-hidden="true">#</a> <strong>3. ESM 的特点</strong></h2><h3 id="✅-静态解析" tabindex="-1"><a class="header-anchor" href="#✅-静态解析" aria-hidden="true">#</a> <strong>✅ 静态解析</strong></h3><p>ESM <strong>在编译阶段</strong>（而不是运行时）解析模块，可以进行 <strong>Tree Shaking（去除无用代码）</strong>，减少最终打包体积，提高性能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// math.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 只导入 add</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在打包时，<code>subtract()</code> 由于未使用，会被 <strong>Tree Shaking</strong> 删除，减少打包体积。</p><hr><h3 id="✅-原生支持异步加载" tabindex="-1"><a class="header-anchor" href="#✅-原生支持异步加载" aria-hidden="true">#</a> <strong>✅ 原生支持异步加载</strong></h3><p>与 CommonJS <strong>同步加载</strong> 不同，ESM 支持 <strong>异步加载</strong>，可以在需要时动态导入模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适用于 <strong>按需加载</strong>，比如路由懒加载：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">moduleA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="✅-适用于浏览器和-node-js" tabindex="-1"><a class="header-anchor" href="#✅-适用于浏览器和-node-js" aria-hidden="true">#</a> <strong>✅ 适用于浏览器和 Node.js</strong></h3><h4 id="_1️⃣-浏览器原生支持" tabindex="-1"><a class="header-anchor" href="#_1️⃣-浏览器原生支持" aria-hidden="true">#</a> <strong>1️⃣ 浏览器原生支持</strong></h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器环境中，ESM 以 <strong>异步方式加载</strong>，不会阻塞页面渲染。</p><h4 id="_2️⃣-node-js-中使用" tabindex="-1"><a class="header-anchor" href="#_2️⃣-node-js-中使用" aria-hidden="true">#</a> <strong>2️⃣ Node.js 中使用</strong></h4><p>在 <code>package.json</code> 中 <strong>声明 ESM 模块</strong>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以直接使用 <code>import</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs/promises&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>package.json</code> 里没有 <code>&quot;type&quot;: &quot;module&quot;</code>，可以使用 <code>.mjs</code> 作为扩展名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> --experimental-modules main.mjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="_4-esm-vs-commonjs" tabindex="-1"><a class="header-anchor" href="#_4-esm-vs-commonjs" aria-hidden="true">#</a> <strong>4. ESM vs CommonJS</strong></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>ESM（ES6 Modules）</strong></th><th><strong>CommonJS</strong></th></tr></thead><tbody><tr><td><strong>导入方式</strong></td><td><code>import { } from &#39;file.js&#39;</code></td><td><code>const module = require(&#39;file&#39;)</code></td></tr><tr><td><strong>导出方式</strong></td><td><code>export</code> / <code>export default</code></td><td><code>module.exports = {}</code></td></tr><tr><td><strong>是否异步</strong></td><td>✅ 异步支持（浏览器 &amp; Node.js）</td><td>❌ 同步阻塞（仅适合 Node.js）</td></tr><tr><td><strong>静态分析</strong></td><td>✅ 支持（可 Tree Shaking）</td><td>❌ 不支持</td></tr><tr><td><strong>适用环境</strong></td><td>✅ 浏览器 &amp; Node.js</td><td>❌ 仅 Node.js</td></tr></tbody></table><hr><h2 id="_5-适用场景" tabindex="-1"><a class="header-anchor" href="#_5-适用场景" aria-hidden="true">#</a> <strong>5. 适用场景</strong></h2><table><thead><tr><th><strong>场景</strong></th><th><strong>使用 ESM 还是 CommonJS？</strong></th></tr></thead><tbody><tr><td><strong>前端开发（React/Vue）</strong></td><td>✅ <strong>ESM</strong>，原生支持</td></tr><tr><td><strong>Node.js（服务器端）</strong></td><td>✅ 推荐 ESM，但 CommonJS 仍广泛使用</td></tr><tr><td><strong>CLI 工具开发</strong></td><td>✅ 取决于环境，CommonJS 使用更广泛</td></tr><tr><td><strong>打包优化（Tree Shaking）</strong></td><td>✅ 仅 ESM 支持</td></tr></tbody></table><hr><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论" aria-hidden="true">#</a> <strong>6. 结论</strong></h2><ul><li>ESM（ES6 Modules）是 JavaScript 官方的模块化方案，适用于 <strong>前端和 Node.js</strong>。</li><li>ESM 采用 <code>import</code> 和 <code>export</code> 语法，支持 <strong>Tree Shaking</strong>，提升打包优化能力。</li><li>相比 CommonJS，ESM 支持 <strong>异步加载</strong>，适合浏览器和现代 JavaScript 项目。</li><li><strong>推荐前端开发使用 ESM，Node.js 也逐步迁移到 ESM。</strong></li></ul><hr>`,63),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","esm.html.vue"]]);export{d as default};
