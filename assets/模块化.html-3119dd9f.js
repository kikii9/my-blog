import{_ as n,o as s,c as a,a as t}from"./app-1a153d54.js";const e={},o=t(`<h2 id="模块化的理解" tabindex="-1"><a class="header-anchor" href="#模块化的理解" aria-hidden="true">#</a> <strong>模块化的理解</strong></h2><h3 id="_1-什么是模块化" tabindex="-1"><a class="header-anchor" href="#_1-什么是模块化" aria-hidden="true">#</a> <strong>1. 什么是模块化？</strong></h3><p><strong>模块化（Modularization）</strong> 是指 <strong>将代码拆分成多个独立的、可复用的功能单元（模块）</strong>，每个模块 <strong>只负责特定的功能</strong>，然后通过 <strong>导入（import）和导出（export）</strong> 进行使用。</p><p>在前端开发中，模块化的目标是： ✅ <strong>提高代码的复用性</strong>（一个模块可以在多个项目中使用）。 ✅ <strong>减少代码耦合</strong>（不同模块之间独立，不影响彼此）。 ✅ <strong>便于维护和管理</strong>（单个文件更清晰，不会出现“巨型文件”）。</p><hr><h3 id="_2-为什么需要模块化" tabindex="-1"><a class="header-anchor" href="#_2-为什么需要模块化" aria-hidden="true">#</a> <strong>2. 为什么需要模块化？</strong></h3><p>在 <strong>早期的 JavaScript 代码</strong> 中，所有代码写在一个文件 <code>script.js</code> 里，导致： ❌ <strong>代码冗长，难以管理</strong> ❌ <strong>变量污染，容易冲突</strong>（全局变量的问题） ❌ <strong>无法按需加载</strong>（所有代码必须一次性加载）</p><p>模块化解决了这些问题，把代码拆成<strong>多个小模块</strong>，让开发更清晰！</p><hr><h2 id="_3-javascript-模块化的发展" tabindex="-1"><a class="header-anchor" href="#_3-javascript-模块化的发展" aria-hidden="true">#</a> <strong>3. JavaScript 模块化的发展</strong></h2><p>模块化经历了几个阶段：</p><h3 id="_1-早期-使用全局变量" tabindex="-1"><a class="header-anchor" href="#_1-早期-使用全局变量" aria-hidden="true">#</a> <strong>① 早期：使用全局变量</strong></h3><p>在没有模块化机制时，开发者只能使用 <strong>全局变量</strong> 存放代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Eunie&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔴 <strong>问题</strong>：多个脚本文件可能会定义相同变量，导致命名冲突！</p><hr><h3 id="_2-commonjs-node-js-使用" tabindex="-1"><a class="header-anchor" href="#_2-commonjs-node-js-使用" aria-hidden="true">#</a> <strong>② CommonJS（Node.js 使用）</strong></h3><p>CommonJS 是 <strong>Node.js 的模块化规范</strong>，特点：</p><ul><li><strong><code>require()</code> 引入模块</strong></li><li><strong><code>module.exports</code> 导出模块</strong></li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// math.js（导出）</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.js（导入）</span>
<span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔴 <strong>问题</strong>：CommonJS <strong>同步加载</strong>，不适用于前端（因为前端需要异步加载）。</p><hr><h3 id="_3-amd-requirejs-前端使用" tabindex="-1"><a class="header-anchor" href="#_3-amd-requirejs-前端使用" aria-hidden="true">#</a> <strong>③ AMD &amp; RequireJS（前端使用）</strong></h3><p>AMD（Asynchronous Module Definition）专为 <strong>前端浏览器</strong> 设计，使用 <code>define</code> 定义模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;dependency&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, AMD!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入模块</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;myModule&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">myModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myModule<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔴 <strong>问题</strong>：语法复杂，使用不方便，因此后来 ES6 推出了 <strong>ES Module</strong>。</p><hr><h3 id="_4-es6-模块-推荐使用" tabindex="-1"><a class="header-anchor" href="#_4-es6-模块-推荐使用" aria-hidden="true">#</a> <strong>④ ES6 模块（推荐使用！）</strong></h3><p>ES6 提供了<strong>原生的模块化支持</strong>，使用 <code>import</code> 和 <code>export</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js（导出）</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.js（导入）</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>优点</strong>：</p><ul><li><strong>浏览器支持</strong>（不需要额外工具）。</li><li><strong>支持静态分析</strong>（编译时就能确定依赖关系）。</li><li><strong>按需加载</strong>，减少不必要的代码加载，提高性能。</li></ul><hr><h2 id="_4-es6-模块的详细介绍" tabindex="-1"><a class="header-anchor" href="#_4-es6-模块的详细介绍" aria-hidden="true">#</a> <strong>4. ES6 模块的详细介绍</strong></h2><h3 id="_1-export-导出" tabindex="-1"><a class="header-anchor" href="#_1-export-导出" aria-hidden="true">#</a> <strong>① export（导出）</strong></h3><p>在 ES6 模块中，可以使用 <code>export</code> 关键字导出：</p><h4 id="🔹-导出多个值" tabindex="-1"><a class="header-anchor" href="#🔹-导出多个值" aria-hidden="true">#</a> <strong>🔹 导出多个值</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// math.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔹-导出默认值-export-default" tabindex="-1"><a class="header-anchor" href="#🔹-导出默认值-export-default" aria-hidden="true">#</a> <strong>🔹 导出默认值（<code>export default</code>）</strong></h4><p>一个模块可以有<strong>一个默认导出</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// math.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// index.js</span>
<span class="token keyword">import</span> multiply <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-import-导入" tabindex="-1"><a class="header-anchor" href="#_2-import-导入" aria-hidden="true">#</a> <strong>② import（导入）</strong></h3><h4 id="🔹-直接导入" tabindex="-1"><a class="header-anchor" href="#🔹-直接导入" aria-hidden="true">#</a> <strong>🔹 直接导入</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔹-直接改名" tabindex="-1"><a class="header-anchor" href="#🔹-直接改名" aria-hidden="true">#</a> <strong>🔹 直接改名</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token keyword">as</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔹-直接导入所有内容" tabindex="-1"><a class="header-anchor" href="#🔹-直接导入所有内容" aria-hidden="true">#</a> <strong>🔹 直接导入所有内容</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> <span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-现代前端模块化工具" tabindex="-1"><a class="header-anchor" href="#_5-现代前端模块化工具" aria-hidden="true">#</a> <strong>5. 现代前端模块化工具</strong></h2><p>尽管 ES6 模块已经很好用，但在实际开发中，我们<strong>仍然需要打包工具</strong>来优化加载速度，主要有：</p><ul><li><strong>Webpack</strong>（老牌、功能强大）</li><li><strong>Vite</strong>（基于 ES Modules，更快）</li><li><strong>Rollup</strong>（适用于库开发）</li></ul><h3 id="webpack-例子" tabindex="-1"><a class="header-anchor" href="#webpack-例子" aria-hidden="true">#</a> <strong>Webpack 例子</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 <code>index.js</code> 里面的模块会被<strong>打包</strong>成 <code>bundle.js</code>，在浏览器中直接加载！</p><hr><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论" aria-hidden="true">#</a> <strong>6. 结论</strong></h2><h3 id="✅-为什么要使用模块化" tabindex="-1"><a class="header-anchor" href="#✅-为什么要使用模块化" aria-hidden="true">#</a> <strong>✅ 为什么要使用模块化？</strong></h3><ol><li><strong>避免全局变量污染</strong>（每个模块都是独立的）。</li><li><strong>代码复用性强</strong>（一个模块可以在多个项目中使用）。</li><li><strong>维护性更高</strong>（拆分代码后，修改更方便）。</li><li><strong>按需加载，优化性能</strong>（只加载需要的代码）。</li></ol><h3 id="✅-现在前端用什么模块化" tabindex="-1"><a class="header-anchor" href="#✅-现在前端用什么模块化" aria-hidden="true">#</a> <strong>✅ 现在前端用什么模块化？</strong></h3><ul><li><strong>Node.js</strong> ✅ 使用 <strong>CommonJS</strong></li><li><strong>前端浏览器</strong> ✅ 使用 <strong>ES6 Modules</strong></li><li><strong>大型项目</strong> ✅ 配合 <strong>Webpack / Vite</strong> 进行优化</li></ul><hr><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结" aria-hidden="true">#</a> <strong>7. 总结</strong></h2><table><thead><tr><th><strong>模块化方案</strong></th><th><strong>适用场景</strong></th><th><strong>优缺点</strong></th></tr></thead><tbody><tr><td><strong>全局变量</strong></td><td>早期JS开发</td><td>❌ 容易变量污染</td></tr><tr><td><strong>CommonJS</strong></td><td>Node.js</td><td>✅ 服务器端常用，❌ 不适合前端</td></tr><tr><td><strong>AMD / RequireJS</strong></td><td>旧版前端模块化</td><td>❌ 语法复杂，已被淘汰</td></tr><tr><td><strong>ES6 Modules</strong></td><td>现代前端（浏览器）</td><td>✅ 原生支持，推荐使用</td></tr><tr><td><strong>Webpack / Vite</strong></td><td>大型项目</td><td>✅ 结合模块化进行优化</td></tr></tbody></table><p>🚀 <strong>建议</strong>：<strong>前端开发推荐使用 ES6 模块化</strong>，配合 <strong>Webpack / Vite</strong> 进行优化！</p>`,67),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","模块化.html.vue"]]);export{u as default};
